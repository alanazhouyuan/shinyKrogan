formatIntensities(tempi)$int.mat |> str()
tempi
formatIntensities(tempi)
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, value.var = "vsCTL")
normIntensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, value.var = "LogIntensities")
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi)
formatIntensities(tempi) |> str()
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, value.var = "vsCTL")
normIntensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi) |> str()
?dcast
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "vsCTL")
normIntensity.mat <- as.matrix(x[,2:nrow(x)], rownames = x$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi) |> str()
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup == 0)){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "vsCTL")
normIntensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi) |> str()
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "vsCTL")
normIntensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi) |> str()
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "vsCTL")
normIntensity.mat <- as.matrix(y[,2:nrow(x)-1], rownames = x$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi) |> str()
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "vsCTL")
normIntensity.mat <- as.matrix(y[,2:nrow(x)-1], rownames = y$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi) |> str()
formatIntensities <- function(intensities){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Protein)]
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "vsCTL")
normIntensity.mat <- as.matrix(y[,2:nrow(y)-1], rownames = y$geneSite)
}
x <- dcast(intensities, geneSite ~ SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$geneSite)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi) |> str()
formatIntensities(tempi, "Phospho") |> str()
formatIntensities <- function(intensities, dataType){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
if (dataType != "Abundance"){
intensities<- setnames(intensities, "Protein", "Site")
intensities[, Protein := tstrsplit(Site, "_")[[1]]]
intensities[, gene := multiUniprots2multiGenes(intensities$Protein)]
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Site)]
intensities[, dataID := Site]
intensities[, dataGene := geneSite]
} else{
intensities[, gene := multiUniprots2multiGenes(intensities$Protein)]
intensities[, dataID := Protein]
intensities[, dataGene :=  gene]
}
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, dataGene ~ SUBJECT, fun.aggregate = mean, value.var = "vsCTL")
normIntensity.mat <- as.matrix(y[,2:nrow(y)-1], rownames = y$dataGene)
}
x <- dcast(intensities, dataGene ~ SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:nrow(x)-1], rownames = x$dataGene)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
formatIntensities(tempi, "Phospho") |> str()
?as.matrix
as.matrix(x[,2:nrow(x)-1], rownames = x$dataGene)
tempix <- formatIntensities(tempi, "Phospho")$intensities
dcast(tempix, dataGene~SUBJECT, fun.aggregate = mean(), value.var = "LogIntensities")
?dcast
tempix |> str()
tempix <- formatIntensities(tempi, "Phospho")$data
dcast(tempix, dataGene~SUBJECT, fun.aggregate = mean(), value.var = "LogIntensities")
dcast(tempix, dataGene~SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
x <- dcast(tempix, dataGene~SUBJECT, fun.aggregate = mean, value.var = "LogIntensities")
as.matrix(x[,2:nrow(x)-1], rownames = x$dataGene)
as.matrix(x[,2:nrow(x)-1], rownames = x$dataGene) |> str()
x[,2:nrow(x)-1]
x[,2:nrow(x)-1] |> str()
x
x[,2:(ncol(x)-1)]
as.matrix(x[,2:ncol(x)-1], rownames = x$dataGene) |> str()
x[,2:ncol(x)-1]
x
x[,2:(ncol(x)-1)]
as.matrix(x[,2:(ncol(x)-1)], rownames = x$dataGene) |> str()
formatIntensities <- function(intensities, dataType){
# Pull out replicate numbers
intensities[, REPLICATE := tstrsplit(SUBJECT, split = "\\.")[[2]]]
# Convert UPIDs to gene names
if (dataType != "Abundance"){
intensities<- setnames(intensities, "Protein", "Site")
intensities[, Protein := tstrsplit(Site, "_")[[1]]]
intensities[, gene := multiUniprots2multiGenes(intensities$Protein)]
intensities[, geneSite := multiUniprotSites2multiGeneSites(intensities$Site)]
intensities[, dataID := Site]
intensities[, dataGene := geneSite]
} else{
intensities[, gene := multiUniprots2multiGenes(intensities$Protein)]
intensities[, dataID := Protein]
intensities[, dataGene :=  gene]
}
# Find Ctl Group for calculating normalized intensity
# will look for anything with "control" or a shortening of "control" or "mock" first, then "veh", then "0h", then "WT"
intensities[, controlGroup := F]
intensities[grepl("([Cc][OoNn]{0,2}[Tt][RrOo]{0,2}[Ll])|([Mm][Oo][Cc][Kk])", GROUP), controlGroup := T]
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Vv][Ee][Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("(0[Hh])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
intensities[grepl("([Ww][Tt])", GROUP), controlGroup := T]
}
if (sum(intensities$controlGroup) == 0){
normIntensity.mat <- NULL
} else{
intensities[, vsCTL := LogIntensities - mean(LogIntensities[controlGroup == T]), by = Protein]
y <- dcast(intensities, dataGene ~ SUBJECT, fun.aggregate = mean(), value.var = "vsCTL")
normIntensity.mat <- as.matrix(y[,2:(ncol(y)-1)], rownames = y$dataGene)
}
x <- dcast(intensities, dataGene ~ SUBJECT, fun.aggregate = mean(), value.var = "LogIntensities")
str(x)
intensity.mat <- as.matrix(x[,2:(ncol(x)-1)], rownames = x$dataGene)
sweptIntensity.mat <- sweep (intensity.mat, 1, apply (intensity.mat, 1, median, na.rm = TRUE))
intensitiesStructure <- list("data" = intensities, "int.mat" = intensity.mat, "norm.mat" = normIntensity.mat, "swept.mat" = sweptIntensity.mat,
"ctlGroups" = unique(intensities[controlGroup == T, GROUP]))
return(intensitiesStructure)
}
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
sample
?sample
runApp()
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
list("data" = data.table(LogIntensities = c(0), adj.pvalue = c(0.99), GROUP = c("Waiting For Input Data")),
"int.mat" =  matrix(1, nrow = 1, ncol = 1, dimnames = list(c("Waiting For Input Data"),("Waiting For Input Data"))) )
runApp()
?rep
runApp()
runApp()
matrix(rep(c(1,-1), 5000), nrow = 1000, ncol = 10, dimnames = list(rep("Waiting For Input Data",1000),rep("Waiting For Input Data",10)))
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sidebarLayout
ui <- fluidPage(
useShinyjs(),
titlePanel("Proteomics Summary Analyses"),
sidebarLayout(
sidebarPanel( id = "sidebar",
helpText("Render a Volcano Plot (PCA Plot, Effect Summary Stacked Bar Chart, and Complex Heatmap coming) from your MSStats results file."),
fileInput("results", "Upload MSStats group comparison results file here."),
fileInput("intensities", "Upload MSStats protein level data file here."),
numericInput("fdr",
label = "FDR adjusted p value threshold:",
min = 0, max = 1, value = 0.05, step = 0.01),
numericInput("foldchange",
label = "Absolute log2 fold change threshold:",
min = 0.001, max = 5, value = 1.0, step = 0.5),
hr(),
checkboxInput("separate", "Separate volcano plots by contrast?"),
checkboxInput("hmcluster", "Order heatmap columns by hierarchical clustering?"),
checkboxInput("hmsample", "Render entire heatmap instead of randomly sampling 1000 rows? \n(this may take a few minutes depending on the size of your data)"),
selectInput("selectMat", "Select normalization for heatmap:",
c("Median Swept", "Normalized to Control", "No normalization"), selected = "Median Swept"),
),
mainPanel(
materialSwitch("tglSide", label = "Toggle Sidebar", value = TRUE, status = "danger"),
textOutput("selected_fdr"),
textOutput("selected_l2fc"),
textOutput("intMatText"),
hr(),
tabsetPanel(type = "tabs", id = "tabset",
tabPanel("Volcano Plot", plotOutput("volcanoPlot")),
tabPanel("Significant Effect Summary", plotOutput("stackedBarPlot")),
tabPanel("PCA Plot", plotOutput("pcaPlot")),
tabPanel("Heatmap by Run", plotOutput("heatmapPlot"))
), id="main"
)
)
)
runApp()
?hr
runApp()
runApp()
colourpicker
?colourpicker
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
runApp()
runApp()
poscond = "Treated"
paste0("Only_In_",poscond)
runApp()
runApp()
grep("[0-9]{1-3}h", c("bruhfellow2h", "yuhuh-36h", "jeepers-72h_ajdfh"))
grep("[0-9]{1-3}h", c("bruhfellow2h", "yuhuh-36h", "nope", "jeepers-72h_ajdfh"))
runApp()
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
?geom_mark_ellipse
o <- o + ggforce::geom_mark_ellipse(aes(fill = Condition, color = Condition, label = Condition))
runApp()
source("C:/Users/isido/github/BBioInformatics/Fooling Around/RShiny/ProteomicsSummaryAnalyses/helpers.R")
runApp()
?geom_point
Sys.Date()
?cairo_pdf
View(cairo_pdf)
runApp()
runApp()
View(BackupAsPDF)
runApp()
runApp()
?pdf
runApp()
?dev.size
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
